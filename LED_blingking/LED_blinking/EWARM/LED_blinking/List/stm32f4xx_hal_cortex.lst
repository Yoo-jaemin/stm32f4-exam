###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         19/Jun/2024  10:36:56
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cortex.c
#    Command line =  
#        -f C:\Users\JASAN1~1\AppData\Local\Temp\EW2DA.tmp
#        (D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cortex.c
#        -D USE_HAL_DRIVER -D STM32F407xx -lC
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM\LED_blinking\List
#        -lA
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM\LED_blinking\List
#        -o
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM\LED_blinking\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.2\arm\inc\c\DLib_Config_Full.h"
#        -I
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM/..\Drivers\STM32F4xx_HAL_Driver\
#        -I
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM/..\Drivers\STM32F4xx_HAL_Driver\Inc\Legacy\
#        -I
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM/..\Drivers\CMSIS\Include\
#        -I
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM/..\Drivers\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM/../Core/Inc\
#        -I
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -Ol)
#    Locale       =  C
#    List file    =  
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM\LED_blinking\List\stm32f4xx_hal_cortex.lst
#    Object file  =  
#        D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\EWARM\LED_blinking\Obj\stm32f4xx_hal_cortex.o
#
###############################################################################

D:\2_Projects\Exam\CubeMx\LED_blingking\LED_blinking\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cortex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_hal_cortex.c
      4            * @author  MCD Application Team
      5            * @brief   CORTEX HAL module driver.
      6            *          This file provides firmware functions to manage the following 
      7            *          functionalities of the CORTEX:
      8            *           + Initialization and de-initialization functions
      9            *           + Peripheral Control functions 
     10            *
     11            @verbatim  
     12            ==============================================================================
     13                                  ##### How to use this driver #####
     14            ==============================================================================
     15          
     16              [..]  
     17              *** How to configure Interrupts using CORTEX HAL driver ***
     18              ===========================================================
     19              [..]     
     20              This section provides functions allowing to configure the NVIC interrupts (IRQ).
     21              The Cortex-M4 exceptions are managed by CMSIS functions.
     22             
     23              (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping()
     24                  function according to the following table.
     25              (#) Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority(). 
     26              (#) Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ().
     27              (#) please refer to programming manual for details in how to configure priority. 
     28                
     29               -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ preemption is no more possible. 
     30                   The pending IRQ priority will be managed only by the sub priority.
     31             
     32               -@- IRQ priority order (sorted by highest to lowest priority):
     33                  (+@) Lowest preemption priority
     34                  (+@) Lowest sub priority
     35                  (+@) Lowest hardware priority (IRQ number)
     36           
     37              [..]  
     38              *** How to configure Systick using CORTEX HAL driver ***
     39              ========================================================
     40              [..]
     41              Setup SysTick Timer for time base.
     42                     
     43             (+) The HAL_SYSTICK_Config() function calls the SysTick_Config() function which
     44                 is a CMSIS function that:
     45                  (++) Configures the SysTick Reload register with value passed as function parameter.
     46                  (++) Configures the SysTick IRQ priority to the lowest value 0x0F.
     47                  (++) Resets the SysTick Counter register.
     48                  (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
     49                  (++) Enables the SysTick Interrupt.
     50                  (++) Starts the SysTick Counter.
     51              
     52             (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
     53                 __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
     54                 HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
     55                 inside the stm32f4xx_hal_cortex.h file.
     56          
     57             (+) You can change the SysTick IRQ priority by calling the
     58                 HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function 
     59                 call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS function.
     60          
     61             (+) To adjust the SysTick time base, use the following formula:
     62                                      
     63                 Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
     64                 (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
     65                 (++) Reload Value should not exceed 0xFFFFFF
     66             
     67            @endverbatim
     68            ******************************************************************************
     69            * @attention
     70            *
     71            * Copyright (c) 2017 STMicroelectronics.
     72            * All rights reserved.
     73            *
     74            * This software is licensed under terms that can be found in the LICENSE file in
     75            * the root directory of this software component.
     76            * If no LICENSE file comes with this software, it is provided AS-IS.
     77            ******************************************************************************
     78            */
     79          
     80          /* Includes ------------------------------------------------------------------*/
     81          #include "stm32f4xx_hal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SetPriorityGrouping(uint32_t)
   \                     __NVIC_SetPriorityGrouping: (+1)
   \        0x0   0xF010 0x0007      ANDS     R0,R0,#0x7
   \        0x4   0x....             LDR.N    R3,??DataTable15  ;; 0xe000ed0c
   \        0x6   0x681A             LDR      R2,[R3, #+0]
   \        0x8   0xF64F 0x01FF      MOVW     R1,#+63743
   \        0xC   0x400A             ANDS     R2,R1,R2
   \        0xE   0x....             LDR.N    R1,??DataTable15_1  ;; 0x5fa0000
   \       0x10   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \       0x14   0x430A             ORRS     R2,R1,R2
   \       0x16   0x601A             STR      R2,[R3, #+0]
   \       0x18   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t __NVIC_GetPriorityGrouping(void)
   \                     __NVIC_GetPriorityGrouping: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable15  ;; 0xe000ed0c
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xF3C0 0x2002      UBFX     R0,R0,#+8,#+3
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable15_2  ;; 0xe000e100
   \       0x12   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     __NVIC_DisableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40C             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable15_3  ;; 0xe000e180
   \       0x12   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \       0x1A   0xF3BF 0x8F4F      DSB      SY
   \       0x1E   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x22   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t __NVIC_GetPendingIRQ(IRQn_Type)
   \                     __NVIC_GetPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD40B             BMI.N    ??__NVIC_GetPendingIRQ_0
   \        0xA   0x....             LDR.N    R0,??DataTable15_4  ;; 0xe000e200
   \        0xC   0x000A             MOVS     R2,R1
   \        0xE   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \       0x10   0x0952             LSRS     R2,R2,#+5
   \       0x12   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \       0x16   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \       0x1A   0x40C8             LSRS     R0,R0,R1
   \       0x1C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0x20   0xE000             B.N      ??__NVIC_GetPendingIRQ_1
   \                     ??__NVIC_GetPendingIRQ_0: (+1)
   \       0x22   0x2000             MOVS     R0,#+0
   \                     ??__NVIC_GetPendingIRQ_1: (+1)
   \       0x24   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SetPendingIRQ(IRQn_Type)
   \                     __NVIC_SetPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_SetPendingIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable15_4  ;; 0xe000e200
   \       0x12   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_SetPendingIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_ClearPendingIRQ(IRQn_Type)
   \                     __NVIC_ClearPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_ClearPendingIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable15_5  ;; 0xe000e280
   \       0x12   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_ClearPendingIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t __NVIC_GetActive(IRQn_Type)
   \                     __NVIC_GetActive: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD40B             BMI.N    ??__NVIC_GetActive_0
   \        0xA   0x....             LDR.N    R0,??DataTable15_6  ;; 0xe000e300
   \        0xC   0x000A             MOVS     R2,R1
   \        0xE   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \       0x10   0x0952             LSRS     R2,R2,#+5
   \       0x12   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \       0x16   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \       0x1A   0x40C8             LSRS     R0,R0,R1
   \       0x1C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0x20   0xE000             B.N      ??__NVIC_GetActive_1
   \                     ??__NVIC_GetActive_0: (+1)
   \       0x22   0x2000             MOVS     R0,#+0
   \                     ??__NVIC_GetActive_1: (+1)
   \       0x24   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     __NVIC_SetPriority: (+1)
   \        0x0   0x0002             MOVS     R2,R0
   \        0x2   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD404             BMI.N    ??__NVIC_SetPriority_0
   \        0x8   0x0109             LSLS     R1,R1,#+4
   \        0xA   0x....             LDR.N    R2,??DataTable15_7  ;; 0xe000e400
   \        0xC   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0xE   0x5411             STRB     R1,[R2, R0]
   \       0x10   0xE007             B.N      ??__NVIC_SetPriority_1
   \                     ??__NVIC_SetPriority_0: (+1)
   \       0x12   0x0109             LSLS     R1,R1,#+4
   \       0x14   0x....             LDR.N    R2,??DataTable15_8  ;; 0xe000ed18
   \       0x16   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x18   0xF010 0x000F      ANDS     R0,R0,#0xF
   \       0x1C   0x4410             ADD      R0,R2,R0
   \       0x1E   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \                     ??__NVIC_SetPriority_1: (+1)
   \       0x22   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t __NVIC_GetPriority(IRQn_Type)
   \                     __NVIC_GetPriority: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD404             BMI.N    ??__NVIC_GetPriority_0
   \        0x8   0x....             LDR.N    R1,??DataTable15_7  ;; 0xe000e400
   \        0xA   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0xC   0x5C08             LDRB     R0,[R1, R0]
   \        0xE   0x0900             LSRS     R0,R0,#+4
   \       0x10   0xE007             B.N      ??__NVIC_GetPriority_1
   \                     ??__NVIC_GetPriority_0: (+1)
   \       0x12   0x....             LDR.N    R1,??DataTable15_8  ;; 0xe000ed18
   \       0x14   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x16   0xF010 0x000F      ANDS     R0,R0,#0xF
   \       0x1A   0x4408             ADD      R0,R1,R0
   \       0x1C   0xF810 0x0C04      LDRB     R0,[R0, #-4]
   \       0x20   0x0900             LSRS     R0,R0,#+4
   \                     ??__NVIC_GetPriority_1: (+1)
   \       0x22   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_EncodePriority(uint32_t, uint32_t, uint32_t)
   \                     NVIC_EncodePriority: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0xF010 0x0007      ANDS     R0,R0,#0x7
   \        0x6   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \        0xA   0x2B05             CMP      R3,#+5
   \        0xC   0xD301             BCC.N    ??NVIC_EncodePriority_0
   \        0xE   0x2304             MOVS     R3,#+4
   \       0x10   0xE001             B.N      ??NVIC_EncodePriority_1
   \                     ??NVIC_EncodePriority_0: (+1)
   \       0x12   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \                     ??NVIC_EncodePriority_1: (+1)
   \       0x16   0x1D04             ADDS     R4,R0,#+4
   \       0x18   0x2C07             CMP      R4,#+7
   \       0x1A   0xD201             BCS.N    ??NVIC_EncodePriority_2
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0xE000             B.N      ??NVIC_EncodePriority_3
   \                     ??NVIC_EncodePriority_2: (+1)
   \       0x20   0x1EC0             SUBS     R0,R0,#+3
   \                     ??NVIC_EncodePriority_3: (+1)
   \       0x22   0x2401             MOVS     R4,#+1
   \       0x24   0xFA14 0xF303      LSLS     R3,R4,R3
   \       0x28   0x1E5B             SUBS     R3,R3,#+1
   \       0x2A   0x4019             ANDS     R1,R3,R1
   \       0x2C   0x4081             LSLS     R1,R1,R0
   \       0x2E   0xFA14 0xF000      LSLS     R0,R4,R0
   \       0x32   0x1E40             SUBS     R0,R0,#+1
   \       0x34   0x4010             ANDS     R0,R0,R2
   \       0x36   0x4308             ORRS     R0,R0,R1
   \       0x38   0xBC10             POP      {R4}
   \       0x3A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DecodePriority(uint32_t, uint32_t, uint32_t *const, uint32_t *const)
   \                     NVIC_DecodePriority: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0xF011 0x0107      ANDS     R1,R1,#0x7
   \        0x6   0xF1D1 0x0407      RSBS     R4,R1,#+7
   \        0xA   0x2C05             CMP      R4,#+5
   \        0xC   0xD301             BCC.N    ??NVIC_DecodePriority_0
   \        0xE   0x2404             MOVS     R4,#+4
   \       0x10   0xE001             B.N      ??NVIC_DecodePriority_1
   \                     ??NVIC_DecodePriority_0: (+1)
   \       0x12   0xF1D1 0x0407      RSBS     R4,R1,#+7
   \                     ??NVIC_DecodePriority_1: (+1)
   \       0x16   0x1D0D             ADDS     R5,R1,#+4
   \       0x18   0x2D07             CMP      R5,#+7
   \       0x1A   0xD201             BCS.N    ??NVIC_DecodePriority_2
   \       0x1C   0x2100             MOVS     R1,#+0
   \       0x1E   0xE000             B.N      ??NVIC_DecodePriority_3
   \                     ??NVIC_DecodePriority_2: (+1)
   \       0x20   0x1EC9             SUBS     R1,R1,#+3
   \                     ??NVIC_DecodePriority_3: (+1)
   \       0x22   0x2501             MOVS     R5,#+1
   \       0x24   0x0006             MOVS     R6,R0
   \       0x26   0x40CE             LSRS     R6,R6,R1
   \       0x28   0xFA15 0xF404      LSLS     R4,R5,R4
   \       0x2C   0x1E64             SUBS     R4,R4,#+1
   \       0x2E   0x4034             ANDS     R4,R4,R6
   \       0x30   0x6014             STR      R4,[R2, #+0]
   \       0x32   0xFA15 0xF101      LSLS     R1,R5,R1
   \       0x36   0x1E49             SUBS     R1,R1,#+1
   \       0x38   0x4008             ANDS     R0,R1,R0
   \       0x3A   0x6018             STR      R0,[R3, #+0]
   \       0x3C   0xBC70             POP      {R4-R6}
   \       0x3E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SystemReset(void)
   \                     __NVIC_SystemReset: (+1)
   \        0x0   0xF3BF 0x8F4F      DSB      SY
   \        0x4   0x....             LDR.N    R1,??DataTable15  ;; 0xe000ed0c
   \        0x6   0x680A             LDR      R2,[R1, #+0]
   \        0x8   0xF412 0x62E0      ANDS     R2,R2,#0x700
   \        0xC   0x....             LDR.N    R0,??DataTable15_9  ;; 0x5fa0004
   \        0xE   0x4302             ORRS     R2,R0,R2
   \       0x10   0x600A             STR      R2,[R1, #+0]
   \       0x12   0xF3BF 0x8F4F      DSB      SY
   \                     ??__NVIC_SystemReset_0: (+1)
   \       0x16   0xBF00             Nop      
   \       0x18   0xE7FD             B.N      ??__NVIC_SystemReset_0

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t SysTick_Config(uint32_t)
   \                     SysTick_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x1E41             SUBS     R1,R0,#+1
   \        0x4   0xF1B1 0x7F80      CMP      R1,#+16777216
   \        0x8   0xD301             BCC.N    ??SysTick_Config_0
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE00E             B.N      ??SysTick_Config_1
   \                     ??SysTick_Config_0: (+1)
   \        0xE   0x1E40             SUBS     R0,R0,#+1
   \       0x10   0x....             LDR.N    R1,??DataTable15_10  ;; 0xe000e014
   \       0x12   0x6008             STR      R0,[R1, #+0]
   \       0x14   0x210F             MOVS     R1,#+15
   \       0x16   0xF05F 0x30FF      MOVS     R0,#-1
   \       0x1A   0x....'....        BL       __NVIC_SetPriority
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x....             LDR.N    R1,??DataTable15_11  ;; 0xe000e018
   \       0x22   0x6008             STR      R0,[R1, #+0]
   \       0x24   0x2007             MOVS     R0,#+7
   \       0x26   0x....             LDR.N    R1,??DataTable15_12  ;; 0xe000e010
   \       0x28   0x6008             STR      R0,[R1, #+0]
   \       0x2A   0x2000             MOVS     R0,#+0
   \                     ??SysTick_Config_1: (+1)
   \       0x2C   0xBD02             POP      {R1,PC}          ;; return
     82          
     83          /** @addtogroup STM32F4xx_HAL_Driver
     84            * @{
     85            */
     86          
     87          /** @defgroup CORTEX CORTEX
     88            * @brief CORTEX HAL module driver
     89            * @{
     90            */
     91          
     92          #ifdef HAL_CORTEX_MODULE_ENABLED
     93          
     94          /* Private types -------------------------------------------------------------*/
     95          /* Private variables ---------------------------------------------------------*/
     96          /* Private constants ---------------------------------------------------------*/
     97          /* Private macros ------------------------------------------------------------*/
     98          /* Private functions ---------------------------------------------------------*/
     99          /* Exported functions --------------------------------------------------------*/
    100          
    101          /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
    102            * @{
    103            */
    104          
    105          
    106          /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions
    107           *  @brief    Initialization and Configuration functions 
    108           *
    109          @verbatim    
    110            ==============================================================================
    111                        ##### Initialization and de-initialization functions #####
    112            ==============================================================================
    113              [..]
    114                This section provides the CORTEX HAL driver functions allowing to configure Interrupts
    115                Systick functionalities 
    116          
    117          @endverbatim
    118            * @{
    119            */
    120          
    121          
    122          /**
    123            * @brief  Sets the priority grouping field (preemption priority and subpriority)
    124            *         using the required unlock sequence.
    125            * @param  PriorityGroup The priority grouping bits length. 
    126            *         This parameter can be one of the following values:
    127            *         @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
    128            *                                    4 bits for subpriority
    129            *         @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
    130            *                                    3 bits for subpriority
    131            *         @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
    132            *                                    2 bits for subpriority
    133            *         @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
    134            *                                    1 bits for subpriority
    135            *         @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
    136            *                                    0 bits for subpriority
    137            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
    138            *         The pending IRQ priority will be managed only by the subpriority. 
    139            * @retval None
    140            */

   \                                 In section .text, align 2, keep-with-next
    141          void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
    142          {
   \                     HAL_NVIC_SetPriorityGrouping: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    143            /* Check the parameters */
    144            assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    145            
    146            /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    147            NVIC_SetPriorityGrouping(PriorityGroup);
   \        0x2   0x....'....        BL       __NVIC_SetPriorityGrouping
    148          }
   \        0x6   0xBD01             POP      {R0,PC}          ;; return
    149          
    150          /**
    151            * @brief  Sets the priority of an interrupt.
    152            * @param  IRQn External interrupt number.
    153            *         This parameter can be an enumerator of IRQn_Type enumeration
    154            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
    155            * @param  PreemptPriority The preemption priority for the IRQn channel.
    156            *         This parameter can be a value between 0 and 15
    157            *         A lower priority value indicates a higher priority 
    158            * @param  SubPriority the subpriority level for the IRQ channel.
    159            *         This parameter can be a value between 0 and 15
    160            *         A lower priority value indicates a higher priority.          
    161            * @retval None
    162            */

   \                                 In section .text, align 2, keep-with-next
    163          void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
    164          { 
   \                     HAL_NVIC_SetPriority: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    165            uint32_t prioritygroup = 0x00U;
   \        0x8   0x2000             MOVS     R0,#+0
    166            
    167            /* Check the parameters */
    168            assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    169            assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
    170            
    171            prioritygroup = NVIC_GetPriorityGrouping();
   \        0xA   0x....'....        BL       __NVIC_GetPriorityGrouping
    172            
    173            NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
   \        0xE   0x0032             MOVS     R2,R6
   \       0x10   0x0029             MOVS     R1,R5
   \       0x12   0x....'....        BL       NVIC_EncodePriority
   \       0x16   0x0001             MOVS     R1,R0
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x1C   0x....'....        BL       __NVIC_SetPriority
    174          }
   \       0x20   0xBD70             POP      {R4-R6,PC}       ;; return
    175          
    176          /**
    177            * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
    178            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    179            *         function should be called before. 
    180            * @param  IRQn External interrupt number.
    181            *         This parameter can be an enumerator of IRQn_Type enumeration
    182            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
    183            * @retval None
    184            */

   \                                 In section .text, align 2, keep-with-next
    185          void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
    186          {
   \                     HAL_NVIC_EnableIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    187            /* Check the parameters */
    188            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    189            
    190            /* Enable interrupt */
    191            NVIC_EnableIRQ(IRQn);
   \        0x2   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0x4   0x....'....        BL       __NVIC_EnableIRQ
    192          }
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
    193          
    194          /**
    195            * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
    196            * @param  IRQn External interrupt number.
    197            *         This parameter can be an enumerator of IRQn_Type enumeration
    198            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
    199            * @retval None
    200            */

   \                                 In section .text, align 2, keep-with-next
    201          void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
    202          {
   \                     HAL_NVIC_DisableIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    203            /* Check the parameters */
    204            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    205            
    206            /* Disable interrupt */
    207            NVIC_DisableIRQ(IRQn);
   \        0x2   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0x4   0x....'....        BL       __NVIC_DisableIRQ
    208          }
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
    209          
    210          /**
    211            * @brief  Initiates a system reset request to reset the MCU.
    212            * @retval None
    213            */

   \                                 In section .text, align 2, keep-with-next
    214          void HAL_NVIC_SystemReset(void)
    215          {
   \                     HAL_NVIC_SystemReset: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    216            /* System Reset */
    217            NVIC_SystemReset();
   \        0x2   0x....'....        BL       __NVIC_SystemReset
    218          }
   \        0x6   0xBD01             POP      {R0,PC}          ;; return
    219          
    220          /**
    221            * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
    222            *         Counter is in free running mode to generate periodic interrupts.
    223            * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
    224            * @retval status:  - 0  Function succeeded.
    225            *                  - 1  Function failed.
    226            */

   \                                 In section .text, align 2, keep-with-next
    227          uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
    228          {
   \                     HAL_SYSTICK_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    229             return SysTick_Config(TicksNumb);
   \        0x2   0x....'....        BL       SysTick_Config
   \        0x6   0xBD02             POP      {R1,PC}          ;; return
    230          }
    231          /**
    232            * @}
    233            */
    234          
    235          /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
    236           *  @brief   Cortex control functions 
    237           *
    238          @verbatim   
    239            ==============================================================================
    240                                ##### Peripheral Control functions #####
    241            ==============================================================================  
    242              [..]
    243                This subsection provides a set of functions allowing to control the CORTEX
    244                (NVIC, SYSTICK, MPU) functionalities. 
    245           
    246                
    247          @endverbatim
    248            * @{
    249            */
    250          
    251          #if (__MPU_PRESENT == 1U)
    252          /**
    253            * @brief  Disables the MPU
    254            * @retval None
    255            */

   \                                 In section .text, align 2, keep-with-next
    256          void HAL_MPU_Disable(void)
    257          {
    258            /* Make sure outstanding transfers are done */
    259            __DMB();
   \                     HAL_MPU_Disable: (+1)
   \        0x0   0xF3BF 0x8F5F      DMB      SY
    260          
    261            /* Disable fault exceptions */
    262            SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
   \        0x4   0x....             LDR.N    R0,??DataTable15_13  ;; 0xe000ed24
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0xF431 0x3180      BICS     R1,R1,#0x10000
   \        0xC   0x6001             STR      R1,[R0, #+0]
    263            
    264            /* Disable the MPU and clear the control register*/
    265            MPU->CTRL = 0U;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x....             LDR.N    R1,??DataTable15_14  ;; 0xe000ed94
   \       0x12   0x6008             STR      R0,[R1, #+0]
    266          }
   \       0x14   0x4770             BX       LR               ;; return
    267          
    268          /**
    269            * @brief  Enable the MPU.
    270            * @param  MPU_Control Specifies the control mode of the MPU during hard fault, 
    271            *          NMI, FAULTMASK and privileged access to the default memory 
    272            *          This parameter can be one of the following values:
    273            *            @arg MPU_HFNMI_PRIVDEF_NONE
    274            *            @arg MPU_HARDFAULT_NMI
    275            *            @arg MPU_PRIVILEGED_DEFAULT
    276            *            @arg MPU_HFNMI_PRIVDEF
    277            * @retval None
    278            */

   \                                 In section .text, align 2, keep-with-next
    279          void HAL_MPU_Enable(uint32_t MPU_Control)
    280          {
    281            /* Enable the MPU */
    282            MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
   \                     HAL_MPU_Enable: (+1)
   \        0x0   0xF050 0x0001      ORRS     R0,R0,#0x1
   \        0x4   0x....             LDR.N    R1,??DataTable15_14  ;; 0xe000ed94
   \        0x6   0x6008             STR      R0,[R1, #+0]
    283            
    284            /* Enable fault exceptions */
    285            SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
   \        0x8   0x....             LDR.N    R0,??DataTable15_13  ;; 0xe000ed24
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0xF451 0x3180      ORRS     R1,R1,#0x10000
   \       0x10   0x6001             STR      R1,[R0, #+0]
    286            
    287            /* Ensure MPU setting take effects */
    288            __DSB();
   \       0x12   0xF3BF 0x8F4F      DSB      SY
    289            __ISB();
   \       0x16   0xF3BF 0x8F6F      ISB      SY
    290          }
   \       0x1A   0x4770             BX       LR               ;; return
    291          
    292          /**
    293            * @brief  Initializes and configures the Region and the memory to be protected.
    294            * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
    295            *                the initialization and configuration information.
    296            * @retval None
    297            */

   \                                 In section .text, align 2, keep-with-next
    298          void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
    299          {
    300            /* Check the parameters */
    301            assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
    302            assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
    303          
    304            /* Set the Region number */
    305            MPU->RNR = MPU_Init->Number;
   \                     HAL_MPU_ConfigRegion: (+1)
   \        0x0   0x7841             LDRB     R1,[R0, #+1]
   \        0x2   0x....             LDR.N    R2,??DataTable15_15  ;; 0xe000ed98
   \        0x4   0x6011             STR      R1,[R2, #+0]
    306          
    307            if ((MPU_Init->Enable) != RESET)
   \        0x6   0x7801             LDRB     R1,[R0, #+0]
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD01E             BEQ.N    ??HAL_MPU_ConfigRegion_0
    308            {
    309              /* Check the parameters */
    310              assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
    311              assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
    312              assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
    313              assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
    314              assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    315              assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    316              assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    317              assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    318              
    319              MPU->RBAR = MPU_Init->BaseAddress;
   \        0xC   0x6841             LDR      R1,[R0, #+4]
   \        0xE   0x....             LDR.N    R2,??DataTable15_16  ;; 0xe000ed9c
   \       0x10   0x6011             STR      R1,[R2, #+0]
    320              MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
    321                          ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
    322                          ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
    323                          ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
    324                          ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
    325                          ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
    326                          ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
    327                          ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
    328                          ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
   \       0x12   0x7B01             LDRB     R1,[R0, #+12]
   \       0x14   0x7AC2             LDRB     R2,[R0, #+11]
   \       0x16   0x0612             LSLS     R2,R2,#+24
   \       0x18   0xEA52 0x7201      ORRS     R2,R2,R1, LSL #+28
   \       0x1C   0x7A81             LDRB     R1,[R0, #+10]
   \       0x1E   0xEA52 0x42C1      ORRS     R2,R2,R1, LSL #+19
   \       0x22   0x7B41             LDRB     R1,[R0, #+13]
   \       0x24   0xEA52 0x4281      ORRS     R2,R2,R1, LSL #+18
   \       0x28   0x7B81             LDRB     R1,[R0, #+14]
   \       0x2A   0xEA52 0x4241      ORRS     R2,R2,R1, LSL #+17
   \       0x2E   0x7BC1             LDRB     R1,[R0, #+15]
   \       0x30   0xEA52 0x4201      ORRS     R2,R2,R1, LSL #+16
   \       0x34   0x7A41             LDRB     R1,[R0, #+9]
   \       0x36   0xEA52 0x2201      ORRS     R2,R2,R1, LSL #+8
   \       0x3A   0x7A01             LDRB     R1,[R0, #+8]
   \       0x3C   0xEA52 0x0241      ORRS     R2,R2,R1, LSL #+1
   \       0x40   0x7800             LDRB     R0,[R0, #+0]
   \       0x42   0x4302             ORRS     R2,R0,R2
   \       0x44   0x....             LDR.N    R0,??DataTable15_17  ;; 0xe000eda0
   \       0x46   0x6002             STR      R2,[R0, #+0]
   \       0x48   0xE005             B.N      ??HAL_MPU_ConfigRegion_1
    329            }
    330            else
    331            {
    332              MPU->RBAR = 0x00U;
   \                     ??HAL_MPU_ConfigRegion_0: (+1)
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0x....             LDR.N    R1,??DataTable15_16  ;; 0xe000ed9c
   \       0x4E   0x6008             STR      R0,[R1, #+0]
    333              MPU->RASR = 0x00U;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0x....             LDR.N    R1,??DataTable15_17  ;; 0xe000eda0
   \       0x54   0x6008             STR      R0,[R1, #+0]
    334            }
    335          }
   \                     ??HAL_MPU_ConfigRegion_1: (+1)
   \       0x56   0x4770             BX       LR               ;; return
    336          #endif /* __MPU_PRESENT */
    337          
    338          /**
    339            * @brief  Clear pending events.
    340            * @retval None
    341            */

   \                                 In section .text, align 2, keep-with-next
    342          void HAL_CORTEX_ClearEvent(void)
    343          {
    344            __SEV();
   \                     HAL_CORTEX_ClearEvent: (+1)
   \        0x0   0xBF40             SEV      
    345            __WFE();
   \        0x2   0xBF20             WFE      
    346          }
   \        0x4   0x4770             BX       LR               ;; return
    347          
    348          /**
    349            * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
    350            * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
    351            */

   \                                 In section .text, align 2, keep-with-next
    352          uint32_t HAL_NVIC_GetPriorityGrouping(void)
    353          {
   \                     HAL_NVIC_GetPriorityGrouping: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    354            /* Get the PRIGROUP[10:8] field value */
    355            return NVIC_GetPriorityGrouping();
   \        0x2   0x....'....        BL       __NVIC_GetPriorityGrouping
   \        0x6   0xBD02             POP      {R1,PC}          ;; return
    356          }
    357          
    358          /**
    359            * @brief  Gets the priority of an interrupt.
    360            * @param  IRQn External interrupt number.
    361            *         This parameter can be an enumerator of IRQn_Type enumeration
    362            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
    363            * @param   PriorityGroup the priority grouping bits length.
    364            *         This parameter can be one of the following values:
    365            *           @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
    366            *                                      4 bits for subpriority
    367            *           @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
    368            *                                      3 bits for subpriority
    369            *           @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
    370            *                                      2 bits for subpriority
    371            *           @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
    372            *                                      1 bits for subpriority
    373            *           @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
    374            *                                      0 bits for subpriority
    375            * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
    376            * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
    377            * @retval None
    378            */

   \                                 In section .text, align 2, keep-with-next
    379          void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
    380          {
   \                     HAL_NVIC_GetPriority: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x000C             MOVS     R4,R1
   \        0x4   0x0015             MOVS     R5,R2
   \        0x6   0x001E             MOVS     R6,R3
    381            /* Check the parameters */
    382            assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    383           /* Get priority for Cortex-M system or device specific interrupts */
    384            NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
   \        0x8   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0xA   0x....'....        BL       __NVIC_GetPriority
   \        0xE   0x0033             MOVS     R3,R6
   \       0x10   0x002A             MOVS     R2,R5
   \       0x12   0x0021             MOVS     R1,R4
   \       0x14   0x....'....        BL       NVIC_DecodePriority
    385          }
   \       0x18   0xBD70             POP      {R4-R6,PC}       ;; return
    386          
    387          /**
    388            * @brief  Sets Pending bit of an external interrupt.
    389            * @param  IRQn External interrupt number
    390            *         This parameter can be an enumerator of IRQn_Type enumeration
    391            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
    392            * @retval None
    393            */

   \                                 In section .text, align 2, keep-with-next
    394          void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
    395          {
   \                     HAL_NVIC_SetPendingIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    396            /* Check the parameters */
    397            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    398            
    399            /* Set interrupt pending */
    400            NVIC_SetPendingIRQ(IRQn);
   \        0x2   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0x4   0x....'....        BL       __NVIC_SetPendingIRQ
    401          }
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
    402          
    403          /**
    404            * @brief  Gets Pending Interrupt (reads the pending register in the NVIC 
    405            *         and returns the pending bit for the specified interrupt).
    406            * @param  IRQn External interrupt number.
    407            *          This parameter can be an enumerator of IRQn_Type enumeration
    408            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
    409            * @retval status: - 0  Interrupt status is not pending.
    410            *                 - 1  Interrupt status is pending.
    411            */

   \                                 In section .text, align 2, keep-with-next
    412          uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
    413          {
   \                     HAL_NVIC_GetPendingIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    414            /* Check the parameters */
    415            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    416            
    417            /* Return 1 if pending else 0 */
    418            return NVIC_GetPendingIRQ(IRQn);
   \        0x2   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0x4   0x....'....        BL       __NVIC_GetPendingIRQ
   \        0x8   0xBD02             POP      {R1,PC}          ;; return
    419          }
    420          
    421          /**
    422            * @brief  Clears the pending bit of an external interrupt.
    423            * @param  IRQn External interrupt number.
    424            *         This parameter can be an enumerator of IRQn_Type enumeration
    425            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
    426            * @retval None
    427            */

   \                                 In section .text, align 2, keep-with-next
    428          void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
    429          {
   \                     HAL_NVIC_ClearPendingIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    430            /* Check the parameters */
    431            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    432            
    433            /* Clear pending interrupt */
    434            NVIC_ClearPendingIRQ(IRQn);
   \        0x2   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0x4   0x....'....        BL       __NVIC_ClearPendingIRQ
    435          }
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
    436          
    437          /**
    438            * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).
    439            * @param IRQn External interrupt number
    440            *         This parameter can be an enumerator of IRQn_Type enumeration
    441            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
    442            * @retval status: - 0  Interrupt status is not pending.
    443            *                 - 1  Interrupt status is pending.
    444            */

   \                                 In section .text, align 2, keep-with-next
    445          uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
    446          {
   \                     HAL_NVIC_GetActive: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    447            /* Check the parameters */
    448            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    449            
    450            /* Return 1 if active else 0 */
    451            return NVIC_GetActive(IRQn);
   \        0x2   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \        0x4   0x....'....        BL       __NVIC_GetActive
   \        0x8   0xBD02             POP      {R1,PC}          ;; return
    452          }
    453          
    454          /**
    455            * @brief  Configures the SysTick clock source.
    456            * @param  CLKSource specifies the SysTick clock source.
    457            *          This parameter can be one of the following values:
    458            *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
    459            *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
    460            * @retval None
    461            */

   \                                 In section .text, align 2, keep-with-next
    462          void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
    463          {
    464            /* Check the parameters */
    465            assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
    466            if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
   \                     HAL_SYSTICK_CLKSourceConfig: (+1)
   \        0x0   0x2804             CMP      R0,#+4
   \        0x2   0xD105             BNE.N    ??HAL_SYSTICK_CLKSourceConfig_0
    467            {
    468              SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
   \        0x4   0x....             LDR.N    R0,??DataTable15_12  ;; 0xe000e010
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0xF051 0x0104      ORRS     R1,R1,#0x4
   \        0xC   0x6001             STR      R1,[R0, #+0]
   \        0xE   0xE004             B.N      ??HAL_SYSTICK_CLKSourceConfig_1
    469            }
    470            else
    471            {
    472              SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
   \                     ??HAL_SYSTICK_CLKSourceConfig_0: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable15_12  ;; 0xe000e010
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0x18   0x6001             STR      R1,[R0, #+0]
    473            }
    474          }
   \                     ??HAL_SYSTICK_CLKSourceConfig_1: (+1)
   \       0x1A   0x4770             BX       LR               ;; return
    475          
    476          /**
    477            * @brief  This function handles SYSTICK interrupt request.
    478            * @retval None
    479            */

   \                                 In section .text, align 2, keep-with-next
    480          void HAL_SYSTICK_IRQHandler(void)
    481          {
   \                     HAL_SYSTICK_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    482            HAL_SYSTICK_Callback();
   \        0x2   0x....'....        BL       HAL_SYSTICK_Callback
    483          }
   \        0x6   0xBD01             POP      {R0,PC}          ;; return
    484          
    485          /**
    486            * @brief  SYSTICK callback.
    487            * @retval None
    488            */

   \                                 In section .text, align 2
    489          __weak void HAL_SYSTICK_Callback(void)
    490          {
    491            /* NOTE : This function Should not be modified, when the callback is needed,
    492                      the HAL_SYSTICK_Callback could be implemented in the user file
    493             */
    494          }
   \                     HAL_SYSTICK_Callback: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0xE000'ED0C        DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \        0x0   0x05FA'0000        DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \        0x0   0xE000'E200        DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \        0x0   0xE000'E280        DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \        0x0   0xE000'E300        DC32     0xe000e300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \        0x0   0xE000'ED18        DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \        0x0   0x05FA'0004        DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \        0x0   0xE000'E014        DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \        0x0   0xE000'E018        DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \        0x0   0xE000'E010        DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \        0x0   0xE000'ED24        DC32     0xe000ed24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \        0x0   0xE000'ED94        DC32     0xe000ed94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \        0x0   0xE000'ED98        DC32     0xe000ed98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \        0x0   0xE000'ED9C        DC32     0xe000ed9c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \        0x0   0xE000'EDA0        DC32     0xe000eda0
    495          
    496          /**
    497            * @}
    498            */
    499          
    500          /**
    501            * @}
    502            */
    503          
    504          #endif /* HAL_CORTEX_MODULE_ENABLED */
    505          /**
    506            * @}
    507            */
    508          
    509          /**
    510            * @}
    511            */
    512          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_CORTEX_ClearEvent
       0   HAL_MPU_ConfigRegion
       0   HAL_MPU_Disable
       0   HAL_MPU_Enable
       8   HAL_NVIC_ClearPendingIRQ
         8   -> __NVIC_ClearPendingIRQ
       8   HAL_NVIC_DisableIRQ
         8   -> __NVIC_DisableIRQ
       8   HAL_NVIC_EnableIRQ
         8   -> __NVIC_EnableIRQ
       8   HAL_NVIC_GetActive
         8   -> __NVIC_GetActive
       8   HAL_NVIC_GetPendingIRQ
         8   -> __NVIC_GetPendingIRQ
      16   HAL_NVIC_GetPriority
        16   -> NVIC_DecodePriority
        16   -> __NVIC_GetPriority
       8   HAL_NVIC_GetPriorityGrouping
         8   -> __NVIC_GetPriorityGrouping
       8   HAL_NVIC_SetPendingIRQ
         8   -> __NVIC_SetPendingIRQ
      16   HAL_NVIC_SetPriority
        16   -> NVIC_EncodePriority
        16   -> __NVIC_GetPriorityGrouping
        16   -> __NVIC_SetPriority
       8   HAL_NVIC_SetPriorityGrouping
         8   -> __NVIC_SetPriorityGrouping
       8   HAL_NVIC_SystemReset
         8   -> __NVIC_SystemReset
       0   HAL_SYSTICK_CLKSourceConfig
       0   HAL_SYSTICK_Callback
       8   HAL_SYSTICK_Config
         8   -> SysTick_Config
       8   HAL_SYSTICK_IRQHandler
         8   -> HAL_SYSTICK_Callback
      12   NVIC_DecodePriority
       4   NVIC_EncodePriority
       8   SysTick_Config
         8   -> __NVIC_SetPriority
       0   __NVIC_ClearPendingIRQ
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ
       0   __NVIC_GetActive
       0   __NVIC_GetPendingIRQ
       0   __NVIC_GetPriority
       0   __NVIC_GetPriorityGrouping
       0   __NVIC_SetPendingIRQ
       0   __NVIC_SetPriority
       0   __NVIC_SetPriorityGrouping
       0   __NVIC_SystemReset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       6  HAL_CORTEX_ClearEvent
      88  HAL_MPU_ConfigRegion
      22  HAL_MPU_Disable
      28  HAL_MPU_Enable
      10  HAL_NVIC_ClearPendingIRQ
      10  HAL_NVIC_DisableIRQ
      10  HAL_NVIC_EnableIRQ
      10  HAL_NVIC_GetActive
      10  HAL_NVIC_GetPendingIRQ
      26  HAL_NVIC_GetPriority
       8  HAL_NVIC_GetPriorityGrouping
      10  HAL_NVIC_SetPendingIRQ
      34  HAL_NVIC_SetPriority
       8  HAL_NVIC_SetPriorityGrouping
       8  HAL_NVIC_SystemReset
      28  HAL_SYSTICK_CLKSourceConfig
       2  HAL_SYSTICK_Callback
       8  HAL_SYSTICK_Config
       8  HAL_SYSTICK_IRQHandler
      64  NVIC_DecodePriority
      60  NVIC_EncodePriority
      46  SysTick_Config
      28  __NVIC_ClearPendingIRQ
      36  __NVIC_DisableIRQ
      28  __NVIC_EnableIRQ
      38  __NVIC_GetActive
      38  __NVIC_GetPendingIRQ
      36  __NVIC_GetPriority
      10  __NVIC_GetPriorityGrouping
      28  __NVIC_SetPendingIRQ
      36  __NVIC_SetPriority
      26  __NVIC_SetPriorityGrouping
      26  __NVIC_SystemReset

 
 906 bytes in section .text
 
 904 bytes of CODE memory (+ 2 bytes shared)

Errors: none
Warnings: none
